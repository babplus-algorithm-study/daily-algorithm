```java

import java.io.*;
import java.util.*;

public class Main {
    static int N, M;
    static int[][] map;
    static boolean[][] visited;
    static int maxSum = 0;

    static int[] dx = {0, 0, 1, -1};
    static int[] dy = {1, -1, 0, 0};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        map = new int[N][M];
        visited = new boolean[N][M];

        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < M; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        // 모든 위치에서 DFS 탐색 & 'ㅗ' 모양 예외 처리
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                visited[i][j] = true;
                dfs(i, j, 1, map[i][j]);
                visited[i][j] = false;

                checkExtraShape(i, j);
            }
        }

        System.out.println(maxSum);
    }

    // DFS 탐색 (깊이 4까지)
    public static void dfs(int x, int y, int depth, int sum) {
        if (depth == 4) {
            maxSum = Math.max(maxSum, sum);
            return;
        }

        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (nx < 0 || ny < 0 || nx >= N || ny >= M || visited[nx][ny]) continue;

            visited[nx][ny] = true;
            dfs(nx, ny, depth + 1, sum + map[nx][ny]);
            visited[nx][ny] = false;
        }
    }

    // 'ㅗ' 모양 예외 처리
    public static void checkExtraShape(int x, int y) {
        // 'ㅗ' 모양은 중심 좌표를 기준으로 4방향 중 3개를 선택
        int[][] shapes = {
                {0, 1, 0, -1, 1, 0},  // ㅜ
                {0, 1, 0, -1, -1, 0}, // ㅗ
                {1, 0, -1, 0, 0, -1}, // ㅓ
                {1, 0, -1, 0, 0, 1}   // ㅏ
        };

        for (int i = 0; i < 4; i++) {
            boolean isValid = true;
            int sum = map[x][y];

            for (int j = 0; j < 3; j++) {
                int nx = x + shapes[i][j * 2];
                int ny = y + shapes[i][j * 2 + 1];

                if (nx < 0 || ny < 0 || nx >= N || ny >= M) {
                    isValid = false;
                    break;
                }
                sum += map[nx][ny];
            }

            if (isValid) {
                maxSum = Math.max(maxSum, sum);
            }
        }
    }
}


```

```java


import java.io.*;
import java.util.*;

public class Main {
    static int N, M;
    static int[][] map;
    static int[][] dp;


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        map = new int[N][M];
        dp = new int[N][M];

        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < M; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        dp[0][0] = map[0][0];
        for(int i=1; i<M; i++){
            dp[0][i] = dp[0][i-1] + map[0][i];
        }

        for(int i=1; i<N; i++){
            int[] left_to_right = new int[M];
            int[] right_to_left = new int[M];

            for(int j=0; j<M; j++){
                if(j==0){
                    left_to_right[j] = dp[i-1][j] + map[i][j];
                }else{
                    left_to_right[j] = Math.max(left_to_right[j-1],dp[i-1][j]) + map[i][j];
                }
            }

            for(int j=M-1; j>=0; j--){
                if(j==M-1){
                    right_to_left[j] = dp[i-1][j] + map[i][j];
                }else{
                    right_to_left[j] = Math.max(right_to_left[j+1],dp[i-1][j]) + map[i][j];
                }
            }

            for(int j=0; j<M; j++){
                dp[i][j] = Math.max(left_to_right[j],right_to_left[j]);
            }
        }

        bw.write(dp[N-1][M-1]+"");
        bw.flush();
        bw.close();

    }
}




```

class ArcheryCompetition {
    private var scores = Array<Int>(11) { 0 }
    private var ans = Array<Int>(11) { 0 }
    private var gap = 0

    fun solution(n: Int, info: IntArray): Array<Int> {
        back(0, n, info)

        return if (gap == 0) {
            arrayOf(-1)
        } else {
            ans
        }
    }

    private fun back(depth: Int, n: Int, info: IntArray) {
        if (depth == n) {
            var aS = 0 //어피치 점수 합
            var rS = 0 //라이언 점수 합

            for (i in 0..10) {
                if (scores[i] > info[i]) {
                    rS += 10 - i
                } else if (info[i] > 0 && info[i] >= scores[i]) {
                    aS += 10 - i
                }
            }

            //라이언의 점수 - 어피치의 점수
            var tGap = rS - aS

            // 점수 차이가 이전 점수차이보다 크다면 ans 배열 갱신
            if (tGap >= gap) {
                gap = tGap
                ans = scores.clone()
            }

            return
        }

        for (i in 0..10) {

            //어피치가 맞춘 개수보다 더 많은 갯수를 맞출 수 있어야 하며
            //어떠한 점수에 대하여 어피치의 화살 개수가 더 많을 때만(넣은 이유는 최소한으로 백트래킹 하기 위함)
            if (n - depth >= info[i] + 1 && scores[i] <= info[i]) {
                scores[i] += info[i] + 1
                back(depth + info[i] + 1, n, info)
                scores[i] -= info[i] + 1
            }

            //만약 끝까지 돌았음에도 위의 조건을 만족하지 못한다면 0점 처리
            if (i == 10) {
                scores[i] += n - depth
                back(depth + n - depth, n, info)
                scores[i] -= n - depth
            }
        }
    }
}
